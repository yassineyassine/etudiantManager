pipeline {
    agent any
		tools {
			maven 'jenkins-maven'
		}
		
		environment {
			BRANCHE_DEV = 'origin/develop'
			BRANCHE_PROD = 'origin/main'
			NEXUS_DOCKER_REGISTRY = "http://prod.local:5003"
			NEXUS_CREDENTIALS_ID = "nexus-credentials"
			DOCKER_IMAGE_NAME = "devops-project-samples"
			DOCKER_IMAGE_TAG = "prod.local:5003"
		}


         stages {




        stage('Ansible job staging') {


            when {
                expression { env.GIT_BRANCH == BRANCHE_DEV }
            }
            steps {
                script {
                    def targetVersion = getEnvVersion("dev")
                    sshagent(credentials: ['ansible-node-manager']) {
                        sh "ssh user-ansible@192.168.0.5 'cd ansible-projects/devops-ansible-deployment && ansible-playbook -i 00_inventory.yml -l staging deploy_playbook.yml --vault-password-file ~/.passvault.txt -e \"docker_image_tag=${targetVersion}\"'"
                    }
                }
            }
        }

        stage('Ansible job production') {
            when {
                expression { env.GIT_BRANCH == BRANCHE_PROD }
            }
            steps {
                script {
                    def targetVersion = getEnvVersion("prod")

                    sshagent(credentials: ['ansible-node-manager']) {
                        sh "ssh user-ansible@192.168.0.5 'cd ansible-projects/devops-ansible-deployment && ansible-playbook -i 00_inventory.yml -l production deploy_playbook.yml --vault-password-file ~/.passvault.txt -e \"docker_image_tag=${targetVersion}\"'"
                    }
                }
            }
        }




        }
	}
        
def getEnvVersion(envName) {
    def pom = readMavenPom file: 'pom.xml'
    // get the current development version
    artifactVersion = "${pom.version}"
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber =artifactVersion+"-${envName}."+env.BUILD_NUMBER;
    } else {
        versionNumber =artifactVersion+"-${envName}."+env.BUILD_NUMBER+'.'+gitCommit.take(8);
    }
    print 'build ${environnement} versions...'
    print versionNumber
    return artifactVersion
}
